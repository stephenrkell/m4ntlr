# include this Makefile in your antlr-m4-derived parser's Makefile!

GRAMMAR_BASENAME ?= example
GRAMMAR_TOPLEVEL ?= toplevel
GRAMMAR_OPTIONS ?= output=AST
GRAMMAR_PATH ?= .

THIS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

INCS := $(wildcard $(GRAMMAR_PATH)/*.inc)

ANTLR ?= java -classpath .:$(CLASSPATH) org.antlr.Tool

# So that we can find test_parser.c.m4
VPATH := $(dir $(THIS_MAKEFILE)):$(VPATH)

#$(GRAMMAR_BASENAME).tokens: Makefile
## create a simple ASCII (32--127) token vocabulary for single-character tokens
#	for num in `seq 32 127`; do printf "'\%o'=$$num\n" "$$num"; done > "$@"

.PHONY: test
test:: $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)PyParser.py
	while read line; do \
		case "$$line" in \
			(\#*) continue ;; \
			(*) eval python $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)PyParser.py $$line  || break ;; \
		esac; \
	done < $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME).g.tests

$(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)_test_parser: \
$(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)CLexer.o $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)CParser.o $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)_test_parser.o
	$(CC) -o "$@" $+ -lantlr3c

M4FLAGS += -I$(dir $(THIS_MAKEFILE))
M4FLAGS += -Dantlr_m4_grammar_name=$(GRAMMAR_BASENAME)
M4FLAGS += -Dantlr_m4_grammar_prefix=$(GRAMMAR_BASENAME)'$$1'
M4FLAGS += -Dantlr_m4_grammar_toplevel=$(GRAMMAR_TOPLEVEL)
M4FLAGS += -Dantlr_m4_user_options="\`$(patsubst %,%;,$(GRAMMAR_OPTIONS))'"

CFLAGS += -I$(GRAMMAR_PATH)/include

TEST_PARSER_DEPS := $(GRAMMAR_PATH)/.$(GRAMMAR_BASENAME)_test_parser.d
$(TEST_PARSER_DEPS) : $(GRAMMAR_PATH)/.%.d : $(GRAMMAR_PATH)/%.c
	$(CC) -MM $(CFLAGS) "$<"  > "$@"
-include $(TEST_PARSER_DEPS)

$(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)_test_parser.c: test_parser.c.m4
	m4 $(M4FLAGS) "$<" > "$@"

.SECONDARY: $(GRAMMAR_PATH)/%Py.g
$(GRAMMAR_PATH)/%Py.g: $(GRAMMAR_PATH)/%.g.m4 $(INCS)
	( test ! -e "$@" || chmod +w "$@" ) && m4 $(M4FLAGS) -Dantlr_m4_include_file=antlr-m4-py.inc "$<" > "$@" && chmod ugo-w "$@"

$(GRAMMAR_PATH)/%PyLexer.py $(GRAMMAR_PATH)/%PyParser.py: $(GRAMMAR_PATH)/%Py.g 
	$(ANTLR) "$<"

.SECONDARY: $(GRAMMAR_PATH)/%C.g
$(GRAMMAR_PATH)/%C.g: $(GRAMMAR_PATH)/%.g.m4 $(INCS)
	( test ! -e "$@" || chmod +w "$@" ) && m4 $(M4FLAGS) -Dantlr_m4_include_file=antlr-m4-c.inc "$<" > "$@" && chmod ugo-w "$@"

#$(warning Grammar path is $(GRAMMAR_PATH))
#$(warning Grammar path is really $(realpath $(GRAMMAR_PATH)))	

$(GRAMMAR_PATH)/%CLexer.c \
$(GRAMMAR_PATH)/%CParser.c \
$(GRAMMAR_PATH)/include/%CLexer.h \
$(GRAMMAR_PATH)/include/%CParser.h: $(GRAMMAR_PATH)/%C.g 
	$(ANTLR) "$<"
	mkdir -p $(GRAMMAR_PATH)/include && \
	mv \
		$(GRAMMAR_PATH)/$*CLexer.h $(GRAMMAR_PATH)/$*CParser.h \
		$(GRAMMAR_PATH)/include/

$(GRAMMAR_PATH)/%Cpp.g: $(GRAMMAR_PATH)/%.g.m4 $(INCS)
	m4 $(M4FLAGS) -Dantlr_m4_include_file=antlr-m4-cpp.inc "$<" > "$@"
	
$(GRAMMAR_PATH)/%CppLexer.c $(GRAMMAR_PATH)/%CppParser.c: $(GRAMMAR_PATH)/%Cpp.g 
	$(ANTLR) "$<"

$(GRAMMAR_PATH)/%Java.g: $(GRAMMAR_PATH)/%.g.m4 $(INCS)
	( test ! -e "$@" || chmod +w "$@" ) && m4 $(M4FLAGS) -Dantlr_m4_include_file=antlr-m4-java.inc -Dantlr_m4_java_package=$$(echo "$<" | sed 's/\.g\.m4$$//') "$<" > "$@" && chmod ugo-w "$@"

# HACK: we have to use this GRAMMAR_BASENAME thing because make has
# no way of expressing <pattern>/<the-same-pattern>blah.foo
$(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)/%JavaLexer.java $(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)/%JavaParser.java: %Java.g
	$(ANTLR) "$<" -o "$(GRAMMAR_PATH)/$(GRAMMAR_BASENAME)"

#.PHONY: headers
#%.h: %.class
#	gcjh -force -d . -classpath .:$(CLASSPATH) $**.class

clean::
	cd $(GRAMMAR_PATH)/ && (rm -f *.class *.h *.o *.a *.pyc *.d; \
	rm -f *Parser.c *Lexer.c; \
	rm -f *Parser.py *Lexer.py; \
	rm -f $(GRAMMAR_BASENAME)/*{Parser,Lexer}.java $(GRAMMAR_BASENAME)/*.tokens; \
	rm -f $(GRAMMAR_BASENAME)_test_parser.c $(GRAMMAR_BASENAME)_test_parser; \
	rm -rf include )
